---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import TOC from "../components/TOC.astro";
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import { Image } from 'astro:assets';

type Props = CollectionEntry<'blog'>['data'];

const { title, description, pubDate, updatedDate, heroImage, tags, headings } = Astro.props;
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
		<style>
			main {
				width: calc(100% - 2em);
				max-width: 100%;
				margin: 0;
			}
			.hero-image {
				width: 100%;
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				border-radius: 12px;
				box-shadow: var(--box-shadow);
			}
			.prose {
				width: 720px;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 1em;
				color: rgb(var(--gray-dark));
			}
			.title {
				margin-bottom: 1em;
				padding: 1em 0;
				text-align: center;
				line-height: 1;
			}
			.title h1 {
				margin: 0 0 0.5em 0;
			}
			.date {
				margin-bottom: 0.5em;
				color: rgb(var(--gray));
			}
			.last-updated-on {
				font-style: italic;
			}
            .post-tag{
				display: flex;
				flex-wrap: wrap;
                justify-content: center;
				gap: 1rem;
                font-size: 0.7em;
				list-style-type: none;
				margin: 0;
				padding: 0;
                line-height: 1.5;
            }
            .post-tag * {
                background: #EEAECA;
                background: radial-gradient(circle,rgba(238, 174, 202, 1) 0%, rgba(148, 187, 233, 1) 100%);
                background-attachment: fixed;
                border-radius: 12px;
                padding: 0.5em;
                transition: box-shadow .3s, text-decoration .5s;
                text-decoration: none;
            }
            .post-tag p:hover{
                box-shadow: 1px 2px 4px hsl(220deg 60% 50%);
                text-decoration: underline;
            }
		</style>
	</head>

	<body>
		<Header />
		<main>
			<article class="blog-content">
                        { headings && headings.length > 0 && (
                        <nav class="blog-toc">
                            <TOC headings={headings} />
                        </nav>
                        )
                        }
				<div class="hero-image">
					{heroImage && <Image width={1020} height={510} src={heroImage} alt="" />}
				</div>
				<div class="prose">
					<div class="title">
						<div class="date">
							<FormattedDate date={pubDate} />
							{
								updatedDate && (
									<div class="last-updated-on">
										Last updated on <FormattedDate date={updatedDate} />
									</div>
								)
							}
						</div>
                        <h1>{title}</h1>
                            <div class = "post-tag">
                                    {tags?.map((tag: any) => (
                                        <p><a href={`/tags/${tag}`}>{tag}</a></p>
                                    ))}
                            </div>
						<hr />
					</div>
                    <div class="blog">
                        <slot />
                    </div>
				</div>
			</article>
		</main>
		<Footer />
	</body>
</html>


<script>
// Source: https://kld.dev/toc-animation/#marking-active-links
addIntersectionObserver();

function addIntersectionObserver() {
	const observer = new IntersectionObserver((sections) => {
		// console.log('sections', sections);
		sections.forEach((section) => {
			const heading = section.target.querySelector('h2, h3, h4, h5');
			if (!heading) return;
			const id = heading.getAttribute('id');

			// Get the link to this section's heading
			const link = document.querySelector(`nav.blog-toc li a[href="#${id}"]`);
            console.log(link)
			if (!link) return;

			// Add/remove the .active class based on whether the
			// section is visible
			const addRemove = section.intersectionRatio > 0 ? 'add' : 'remove';
			link.classList[addRemove]('active');
		});
	});

	document.querySelectorAll('.blog-content section').forEach((section) => {
		observer.observe(section);
	})
}
</script>
